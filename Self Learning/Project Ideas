Python Project Ideas: Beginner Level
•	Create a "Code" Generator that takes text as input and replaces each letter with another letter, and outputs the "encoded" message.
•	Build a "countdown calculator." Write some code that can take two dates as input, and calculate the amount of time between them. This will be a great way to familiarize yourself with Python's datetime module.
•	Write a Sorting Method. Given a list, can you write some code that sorts it alphabetically, or numerically? Yes, Python has this functionality built-in, but see if you can do it without using sort()!
•	Build an Interactive Quiz. Which Avenger are you? Build a personality or recommendation quiz that can asks users some questions, stores their answers, and then perform some kind of calculation to give the user a personalized end result that's based on their answers
•	Tic-Tac-Toe by Text. Build a Tic-Tac-Toe game that's playable like a text adventure. Can you make it print a text-based representation of the board after each move?
•	Make a Temperature/Measurement Converter. Write a script that can convert Fahrenheit to Celcius and back, or inches to centimeters and back, etc. How far ca you take it?
•	Build a counter app. Take your first steps into the world of UI by building a very simple app that counts up by one each time a user clicks a button.
•	Build a number guessing game. Think of this as a bit like a text adventure, but with numbers. How far can you take it?
•	Build an alarm clock. This is borderline beginner/intermediate, but it's worth trying to build an alarm clock for yourself. Can you create different alarms? A snooze function?

Python Project Ideas: Intermediate Level
•	Build an Upgraded Code Generator. Starting with the project mentioned in the beginner section, see what you can do to make it more sophisticated. Can you make it generate different kinds of codes. Can you create a "decoder" app that reads encoded messages if the user inputs a secret key? Can you create a more sophisticated code that goes beyond simple letter-replacement?
•	Make your Tic-Tac-Toe Game clickable. Building off the beginner project, now make a version of Tic-Tac-Toe that has an actual UI, and that you play by clicking on open squares. Challenge: can you write a simple "AI" opponent for a human player to play against?
•	Scrape some data to analyze. This could really be anything, from any website you like. The web is full of interesting data, and if you learn a little about web-scraping, you can collect some really unique datasets.
•	Build a Clock Website. How close can you get it to real-time? Can you implement different time zone selectors, and add in the "countdown calculator" functionality to calculate lengths of time?
•	Automate some of your job. This will vary, but many jobs have some kind of repetitve process that can be automated!
•	Automate your personal habits. Do you want to remember to stand up once every hour during work? How about writing some code that generates you unique workout plans based on your goals and preferences? There are a variety of simple apps you can build for yourself to automate or enhance different aspects of your life.
•	Create a simple web browser. Build a simple UI that allows for URL enter and that can load webpages. PyWt will be helpful here! Can you add "back" button, bookmarks, and other cool features?
•	Write a notes app. Create an app that helps people write and store notes. Can you think of some interesting and unique features to add?
•	Build a Typing Tester. This should show the user some text, and then challenge them to type it, timing them for the length of time it takes them to finish, and scoring them on their accuracy.
•	Create a "site updated" notification system. Ever get annoyed with having to refresh a website to see if an out-of-stock product has been relisted, or to see if any new news has been posted? Write a Pythons script that automatically checks a given URL for updates and informs you instantly when it identifies one. (Be careful not to overload the servers of whatever site you're checking, though — keep the time interval reasonable between each check).
•	Recreate your favorite board game in Python. There are tons of options here, from something simple like Checkers all the way up to Risk or even more modern and advanced games like Ticket to Ride or Settlers of Catan. How close can you get to the real thing?
•	Build a Wikipedia Explorer. Build an app that displays a random Wikipedia page. The challenge here is in the details: can you add user-selected categories? Can you try a different "rabbit hole" version of the app where each article is randomly selected from the articles linked in the previous article? This might seem simple, but it can actually take some real web-scraping chops.

Python Project Ideas: Advanced Level
•	Build a Stock Market Prediction App. For this one, you'll need a source of stock market data and some machine learning chops, but tons of people have tried this, so there's a lot of source code out there to work from. 
•	Build a Chatbot. The challenge here isn't so much making the chatbot as making it good. Can you, for example, implement some Natural Language Processing techniques to make it sound more natural and spontaneous?
•	Program a robot. This requires some hardware (which isn't usually free) but there are lots of affordable options out there, and tons of learning resources too. Definitely look into Raspberry Pi if you're not already thinking along those lines.
•	Build an Image Recognition App. Starting with handwriting recognition is a good idea — Dataquest even has a guided project to help with that! — but once you've got that down, you can take it much bigger.
•	Make a Price Prediction Model. Pick an industry or product you're interested in, and build a machine learning model that predicts price changes.
•	Create your own Sentiment Analysis Model. Sure, there are plenty of pre-built ones out there, but can you collect a large corpus of text data and build one of your own? (Or, less challenging: optimize an existing sentiment analysis model for the particular text you're analyzing.)
•	Create an interactive map. This will require a mix of data skills and UI creation skills. Your map can display whatever you'd like — bird migrations, traffic data, crime reports — but it should be interactive in some way. How far can you take it?
